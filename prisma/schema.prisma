// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @default(autoincrement()) @id
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model Teacher {
  userid            Int       @id
  user              User      @relation(references: [id], fields: [userid])
}

model Student {
  userid            Int       @id
  user              User      @relation(references: [id], fields: [userid])
}

model Table {
  id            Int          @default(autoincrement()) @id
  name          String
  teacherId     Int
  teacher       Teacher      @relation(references: [userid], fields: [teacherId])
  students      Student[]
  iconid        Int?
  icon          Image?       @relation(references: [id], fields: [iconid])
  tasks         Task[]
  badges        Badge[]
}

model TaskCompletion {
  userid        Int
  user          User         @relation(references: [id], fields: [userid])
  taskid        Int
  task          Task         @relation(references: [id], fields: [taskid])

  @@id([userid, taskid])
}

model BadgeCompletion {
  userid        Int
  user          User         @relation(references: [id], fields: [userid])
  badgeid       Int
  badge         Badge        @relation(references: [id], fields: [badgeid])

  @@id([userid, badgeid])
}

model Task {
  id            Int          @default(autoincrement()) @id
  name          String
  points        Int
  description   String?
  endsAt        DateTime     @default(now())
}

model Badge {
  id            Int          @default(autoincrement()) @id
  name          String?
  imageid       Int?
  image         Image?       @relation(references: [id], fields: [imageid])
}

model Image {
  id            Int          @default(autoincrement()) @id
  width         Int
  height        Int
  path          String
}

model Invitations {
  id            Int       @default(autoincrement()) @id
  studentid     Int
  student       Student   @relation(references: [userid], fields: [studentid])
  tableid       Int
  table         Table     @relation(references: [id], fields: [tableid])
  createdAt     DateTime  @default(now())
}

model VerificationRequest {
  id         Int       @default(autoincrement()) @id
  identifier String
  token      String    @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model migration {
  revision           Int       @default(autoincrement()) @id
  name               String
  datamodel          String
  status             String
  applied            Int
  rolled_back        Int
  datamodel_steps    String
  database_migration String
  errors             String
  started_at         DateTime
  finished_at        DateTime?
  @@map("_migration")
}